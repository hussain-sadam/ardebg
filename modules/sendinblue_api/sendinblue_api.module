<?php

/**
 * @file
 * Contains sendinblue_api.module.
 */

use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_cron().
 */
function sendinblue_api_cron()
{
  $cc = \Drupal::service('sendinblue_api');

  $cc->getMailingLists(false);
}

/**
 * Implements hook_help().
 */
function sendinblue_api_help($route_name, RouteMatchInterface $arg)
{
  switch ($route_name) {
    case 'help.page.sendinblue_api':
    $output = '';
    $output .= '<h3>' . t('Introduction') . '</h3>';
    $output .= '<p>' . t('Sendinblue API integration module using <a href=":link">API v3</a>.', [':link' => 'https://developers.sendinblue.com']) . t('It allows users to add an API key and secret generated by a
      Sendinblue API account in the settings.php
      file (or via an admin UI). Then will allow users
      to activate/enable a list and create a block
      derivative for each list that is enabled.
      It also provides an optional REST endpoint
      to send signups to the CC API for enabled lists. For a full description of the module, visit the
      <a href=":link">project page</a>. ', [':link' => 'https://www.drupal.org/project/sendinblue_api']) . t('To submit bug reports and feature suggestions, or track changes
      visit the <a href=":link">project issue page</a>.', [':link' => 'https://www.drupal.org/project/issues/sendinblue_api']) . '</p>';

      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('<a href=":link">How to install and configure the module</a>', [':link' => 'https://interactiveknowledge.com/insights/how-use-drupal-sendinblue-api-module']) . '.</p>';

      $output .= '<br/><br/>';

      return $output;
    }
  }

/**
 * Implements hook_entity_delete()
 */
function sendinblue_api_entity_delete(EntityInterface $entity)
{
  if ($entity->getEntityType() instanceof ContentEntityType) {
    _sendinblue_api_entity_subscribe_on_save($entity, 'delete');
  }
}

/**
 * Implements hook_entity_insert()
 */
function sendinblue_api_entity_insert(EntityInterface $entity)
{
  if ($entity->getEntityType() instanceof ContentEntityType) {
    _sendinblue_api_entity_subscribe_on_save($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update()
 */
function sendinblue_api_entity_update(EntityInterface $entity)
{
  if ($entity->getEntityType() instanceof ContentEntityType) {
    _sendinblue_api_entity_subscribe_on_save($entity, 'update');
  }
}

/**
 * Implements hook_form_alter().
 *
 * - Add list options to entity field for sendinblue_api_list field types
 * - Add additional validation for fields that are mapped to subscribe on save settings.
 */
function sendinblue_api_form_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  if (
    $form_state->getFormObject() instanceof ContentEntityFormInterface &&
      // Skip delete forms
    (
      strpos($form_id, '_cancel_form') === false &&
      strpos($form_id, '_delete_form') === false
    )
  ) {
    /** @var \Drupal\Core\Entity\EntityForm $entity_form */
    $entity_form = $form_state->getFormObject();
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $entity_form->getEntity();

    foreach ($entity->getFields() as $field_name => $field) {
      $fieldDefinition = $field->getFieldDefinition();

      if ($fieldDefinition->getType() === 'sendinblue_api_lists') {
        $fieldDefinition = $field->getFieldDefinition();
        $cc = \Drupal::service('sendinblue_api');

        // Add validation and submit handler if subscribe_on_save is true.
        if ($fieldDefinition->getSetting('subscribe_on_save') === 1) {
          $form_state->set('sendinblue_api_service', $cc);
          $form['#validate'][] = '_sendinblue_api_subscribe_on_save_validate';
        }

        // Add our list options.
        if ($fieldDefinition->getSetting('enabled_lists_only') === 1) {
          $lists = $cc->getEnabledMailingLists();
        } else {
          $lists = $cc->getMailingLists();
        }

        if (is_array($lists)) {
          foreach ($lists as $id => $list) {
            $form[$field_name]['widget']['#options'][$id] = $list->name;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_webform_options_WEBFORM_OPTIONS_ID_alter() for CC List options.
 */
function sendinblue_api_webform_options_sendinblue_api_lists_alter(array &$options, array $element = [])
{
  /** @var \Drupal\sendinblue_api\Service\SendinblueApi $sendinblueApi */
  $sendinblueApi = \Drupal::service('sendinblue_api');
  $lists = $sendinblueApi->getEnabledMailingLists();
  $options = [];

  if ($lists && is_array($lists) && count($lists) > 0) {
    foreach ($lists as $list) {
      $options[$list->list_id] = $list->name;
    }
  }
}

/**
 * Validate entity forms that have sendinblue_api_list field type with subscribe_on_save setting checked.
 *
 * Make sure we have the required fields if a list value is popuplated
 *
 * @param [type] $form
 * @param [type] $form_state
 * @return void
 */
function _sendinblue_api_subscribe_on_save_validate($form, &$form_state)
{
  $entityForm = $form_state->getFormObject();
  $entity = $entityForm->getEntity();
  $entityFields = $entity->getFields();
  $cc = $form_state->get('sendinblue_api_service');

  foreach ($entityFields as $field_name => $field) {
    $fieldDefinition = $field->getFieldDefinition();

    if ($fieldDefinition->getType() === 'sendinblue_api_lists') {
      $listValues = $form_state->getValue($field_name);

      if ($fieldDefinition->getSetting('subscribe_on_save') === 1 && !empty($listValues)) {
        $fieldMapping = $fieldDefinition->getSetting('field_mapping');

        foreach ($fieldMapping as $ccFieldName => $entityFieldName) {
          if ($ccFieldName === 'email_address') {
            $value = $form_state->getValue($entityFieldName);
            $isEmpty = false;

            if (empty($value) && !is_array($value)) {
              $isEmpty = true;
            } else if (is_array($value) && (!isset($value[0]) || !isset($value[0]['value']) || empty($value[0]['value']) || $value[0]['value'] === '')) {
              $isEmpty = true;
            }

            if ($isEmpty) {
              $form_state->setErrorByName($entityFieldName, t('The %field field is required to subscribe to lists in field %source', [
                '%field' => $entityFields[$entityFieldName]->getFieldDefinition()->getLabel(),
                '%source' => $fieldDefinition->getLabel()
              ]));
            }
          }
        }
      }
    }
  }

}


/**
 * Subscribe on save of entity
 */
function _sendinblue_api_entity_subscribe_on_save($entity, $op = 'update')
{
  $entityFields = $entity->getFields();
  $data = $lists = [];

  foreach ($entityFields as $field_name => $field) {
    $fieldDefinition = $field->getFieldDefinition();

    if ($fieldDefinition->getType() === 'sendinblue_api_lists' && $fieldDefinition->getSetting('subscribe_on_save') === 1) {
      $cc = \Drupal::service('sendinblue_api');
      $hasChanged = false;

      if (
          // If it is new and we need to subscribe
        ($op === 'insert' && $entity->{$field_name}->count() > 0) ||
          // If it is delete and we need to unsubscribe
        ($op === 'delete' && $entity->{$field_name}->count() > 0 && $fieldDefinition->getSetting('unsubscribe_on_delete') === 1) ||
          // If it is update and counts don't match
        ($op === 'update')
      ) {
        $hasChanged = true;
      }

      if ($hasChanged) {
        foreach ($entity->{$field_name}->getValue() as $delta => $value) {
          if (isset($value['value']) && !empty($value['value'])) {
            $lists[] = $value['value'];
          }
        }

        $fieldMapping = $fieldDefinition->getSetting('field_mapping');

        foreach ($fieldMapping as $ccFieldName => $entityFieldName) {
          $value = $entity->{$entityFieldName}->getValue();

          if (is_array($value)) {
            $value = $value[0]['value'];
          }

          $data[$ccFieldName] = $value;
        }

        if ($op === 'delete') {
          $list_data = $entity->{$field_name}->getValue();
          if (isset($list_data[0]['value']) && $list_data[0]['value'] != '') {
            $data['mailing_list_id'] = $list_data[0]['value'];
          }
          $response = $cc->unsubscribeContact($data, $lists);
        } else {
          $response = $cc->submitContactForm($data, $lists);
        }
      }
    }
  }
}

function validatePhoneNumber($phoneNumber)
{
  $regex = '/^\+?[0-9]{1,3}\s?\(?[0-9]{3}\)?[-\s]?[0-9]{3}[-\s]?[0-9]{4}$/';
  if (preg_match($regex, $phoneNumber)) {
    return true;
  } else {
    return false;
  }
}